#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cmath>
#include <iomanip>
#include <cstdlib> // malloc, free 사용
using namespace std;

struct RC_SIM {
    double time;
    double vc;  // 커패시터 전압
    double i;   // 전류
};

int main() {
    // 시뮬레이션 매개변수
    double start_time, end_time, time_step, R, C, initial_vc;
    const double V_source = 5.0; // 입력 전압을 5V로 고정

    // 사용자 입력
    cout << "RC 회로 시뮬레이션" << endl;
    cout << "==================" << endl;

    cout << "저항 값 (Ohms): ";
    cin >> R;

    cout << "커패시터 값 (μF): ";
    double temp_C;
    cin >> temp_C;
    C = temp_C * 1e-6; // 마이크로파라드 -> 파라드 변환

    cout << "시작 시간 (초): ";
    cin >> start_time;

    cout << "종료 시간 (초): ";
    cin >> end_time;

    cout << "시간 간격 (초): ";
    cin >> time_step;

    cout << "초기 커패시터 전압 (Volts): ";
    cin >> initial_vc;
    cout << endl;

    // 입력 검증
    if (end_time <= start_time || R <= 0 || C <= 0 || time_step <= 0) {
        cout << "오류: 올바른 값을 입력하세요." << endl;
        return -1;
    }

    long no_array = static_cast<long>((end_time - start_time) / time_step) + 1;
    double tau = R * C;
    cout << "시간 단계 수: " << no_array << endl;
    cout << "RC 시정수 (tau): " << tau << " 초" << endl << endl;

    // malloc을 이용한 동적 배열 할당
    RC_SIM* simulation = (RC_SIM*)malloc(no_array * sizeof(RC_SIM));
    if (!simulation) {
        cout << "메모리 할당 실패!" << endl;
        return -1;
    }

    // 시뮬레이션 수행
    for (int i = 0; i < no_array; i++) {
        double t = start_time + i * time_step;
        simulation[i].time = t;
        simulation[i].vc = V_source + (initial_vc - V_source) * exp(-(t - start_time) / tau);
        simulation[i].i = (V_source - simulation[i].vc) / R;
    }

    // 결과 출력
    cout << "시뮬레이션 결과:" << endl;
    cout << "================" << endl;
    cout << setw(10) << "시간(초)" << setw(15) << "전압(V)" << setw(15) << "전류(mA)" << endl;
    cout << "----------------------------------------" << endl;

    int step = max(1, static_cast<int>(no_array / 20)); // 최대 20개 출력
    for (int i = 0; i < no_array; i += step) {
        cout << fixed << setprecision(3);
        cout << setw(10) << simulation[i].time
            << setw(15) << simulation[i].vc
            << setw(15) << simulation[i].i * 1000 << endl;  // mA 변환
    }

    // 동적 메모리 해제
    free(simulation);

    return 0;
}
